

# Definition: 
	The singleton pattern is a design pattern that restricts the instantiation of a class to one object. 
	In this pattern, a class has only one instance in the program that provides a global point of access to it. 
	In other words, a singleton is a class that allows only a single instance of itself to be created and usually gives simple access to that instance.


# There are various ways to implement a singleton pattern in C#. The following are the common characteristics of a singleton pattern.
	=> Private and parameterless single constructor
	=> Sealed class.
	=> Static variable to hold a reference to the single created instance
	=> A public and static way of getting the reference to the created instance.
	=> Advantages of Singleton Design Pattern

 
# The advantages of a Singleton Pattern are,
    => Singleton pattern can implement interfaces.
    => Can be lazy-loaded and has Static Initialization.
    => It helps to hide dependencies.
    => It provides a single point of access to a particular instance, so it is easy to maintain.
    => Disadvantages of Singleton Design Pattern

 
# The disadvantages of a Singleton Pattern are,
    => Unit testing is a bit difficult as it introduces a global state into an application
    => Reduces the potential for parallelism within a program by locking.
    => Singleton class vs. Static methods
 

# The following compares Singleton class vs. Static methods,
    => A Static Class cannot be extended whereas a singleton class can be extended.
    => A Static Class cannot be initialized whereas a singleton class can be.
    => A Static class is loaded automatically by the CLR when the program containing the class is loaded.


# How to Implement Singleton Pattern in C# code
    There are several ways to implement a Singleton Pattern in C#.
    => No Thread Safe Singleton.
    => Thread-Safety Singleton.
    => Thread-Safety Singleton using Double-Check Locking.
    => Thread-safe without a lock.
    => Using .NET 4's Lazy<T> type.